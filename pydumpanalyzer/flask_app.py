''' this file is home to the flask-based application that is the following:
    1. Receiver and storer of symbol files and executables
    2. Receiver and storer of crash dumps
    3. Analyzer of crash dumps
    4. Windows symbol server when accessible via an endpoint
'''
import datetime
import enum
import itertools
import os
import pickle

import flask
import flask_selfdoc

import __version__
import _html
import utility
from csmlog_setup import getLogger
from storage import Storage

CACHED_ANALYSIS_FILE_NAME = 'analysis.pickle'
THIS_DIR = os.path.abspath(os.path.dirname(__file__))
ROOT_STORAGE_LOCATION = os.path.join(THIS_DIR, 'storage')
WINDOWS_SYMBOLS_LOCATION = os.path.join(ROOT_STORAGE_LOCATION, "WindowsSymbols")

app = flask.Flask("PyDumpAnalyzerFlaskApp")
auto = flask_selfdoc.Autodoc(app)

class WEBPAGES_NAVBAR(enum.Enum):
    ''' enum with all top level web pages for the navbar '''
    #Crashes = '/show/crashes/' # not ported yet
    API_Docs = '/show/apidocs/'

class WEBPAGES_NOT_NAVBAR(enum.Enum):
    ''' enum with all outward web pages. Ones that are in here,
    but not in WEBPAGES_NAVBAR are not shown in the navbar '''
    Home = '/'

WEBPAGES = enum.Enum('WEBPAGES', [(i.name, i.value) for i in itertools.chain(WEBPAGES_NAVBAR, WEBPAGES_NOT_NAVBAR)])

@app.context_processor
def injectTemplateContext():
    ''' everything returned in this function is added to the context for all
    templates that flask renders. Only global, template driven things should be here. '''
    return {
        # this is the version of PDA...
        'pda_version' : __version__.__version__,
        'navItems' : [(a.name.replace('_', ' '), a.value) for a in list(WEBPAGES_NAVBAR)]
    }

@app.route(WEBPAGES.API_Docs.value, methods=['GET'])
@auto.doc()
def apiDocumentation():
    ''' returns a lovely documentation page of all supported APIs. Generated by flask_selfdoc. '''
    return flask.render_template('base.html', html_content=auto.html())

@app.route(WEBPAGES.Home.value, methods=['GET'])
@auto.doc()
def home():
    ''' the home page for the app '''
    with Storage() as storage:
        cursor = storage.database.execute("SELECT Name FROM Applications")
        table = _html.HtmlTable.fromCursor(cursor, classes='content', name="Applications")

    if table:
        pass
        # add links to the view the Application's tables
    else:
        table = '<p>No applications have reported back to PDA... yet!</p>'

    return flask.render_template('home.html', html_content=table)

if __name__ == '__main__':
    app.url_map.strict_slashes = False
    app.run()
